{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _initialState;\nimport shortId from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nexport var initialState = (_initialState = {\n  mainPosts: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  ImagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}, _defineProperty(_initialState, \"addPostLoading\", false), _defineProperty(_initialState, \"addPostDone\", false), _defineProperty(_initialState, \"addPostError\", null), _defineProperty(_initialState, \"removePostLoading\", false), _defineProperty(_initialState, \"removePostDone\", false), _defineProperty(_initialState, \"removePostError\", null), _defineProperty(_initialState, \"addCommentLoading\", false), _defineProperty(_initialState, \"addCommentDone\", false), _defineProperty(_initialState, \"addCommentError\", null), _initialState);\n\n// faker 로 가상 글 및 이미지 추가\nfaker.seed(123);\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.fullName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.fullName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    }\n  };\n};\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false, draft.removePostDone = true, draft.mainPosts = draft.mainPost.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      // 불변성\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","ImagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","seed","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","fullName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","length","error","unshift","removePostLoading","removePostDone","removePostError","mainPost","filter","v","addCommentLoading","addCommentDone","addCommentError","post","find","postId"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  ImagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\n// faker 로 가상 글 및 이미지 추가\nfaker.seed(123);\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.fullName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.fullName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        (draft.removePostLoading = false),\n          (draft.removePostDone = true),\n          (draft.mainPosts = draft.mainPost.filter(\n            (v) => v.id !== action.data\n          ));\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      // 불변성\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}