{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [{\n    // id, content 는 게시글 자체의 속성이기 때문에 소문자, User,Images,Comments 는 다른정보들과 합쳐서 주기 때문에 대문자\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    },\n    content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortid.generate(),\n      src: \"http://www.chemicalnews.co.kr/news/photo/202106/3636_10174_4958.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"https://src.hidoc.co.kr/image/lib/2022/5/12/1652337370806_0.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"http://image.dongascience.com/Photo/2019/12/43a8a87814b98b5346192ec9855f5883.jpg\"\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"Amanda\"\n      },\n      content: \"우와아 고양이다\"\n    }]\n  }],\n  ImagePaths: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n  // 게시글 추가가 완료됬을 때 true\n};\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortid.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    }\n  };\n};\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false, draft.removePostDone = true, draft.mainPosts = draft.mainPost.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      // 불변성\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortid","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","ImagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","mainPost","filter","v","post","find","postId"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/reducers/post.js"],"sourcesContent":["import shortid from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      // id, content 는 게시글 자체의 속성이기 때문에 소문자, User,Images,Comments 는 다른정보들과 합쳐서 주기 때문에 대문자\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"뚜갱\",\n      },\n      content: \"첫번째 게시글 #해시태그 #익스프레스\",\n      Images: [\n        {\n          id: shortid.generate(),\n          src: \"http://www.chemicalnews.co.kr/news/photo/202106/3636_10174_4958.jpg\",\n        },\n        {\n          id: shortid.generate(),\n          src: \"https://src.hidoc.co.kr/image/lib/2022/5/12/1652337370806_0.jpg\",\n        },\n        {\n          id: shortid.generate(),\n          src: \"http://image.dongascience.com/Photo/2019/12/43a8a87814b98b5346192ec9855f5883.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortid.generate(),\n          User: {\n            id: shortid.generate(),\n            nickname: \"Amanda\",\n          },\n          content: \"우와아 고양이다\",\n        },\n      ],\n    },\n  ],\n  ImagePaths: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  // 게시글 추가가 완료됬을 때 true\n};\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        (draft.removePostLoading = false),\n          (draft.removePostDone = true),\n          (draft.mainPosts = draft.mainPost.filter(\n            (v) => v.id !== action.data\n          ));\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      // 불변성\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}