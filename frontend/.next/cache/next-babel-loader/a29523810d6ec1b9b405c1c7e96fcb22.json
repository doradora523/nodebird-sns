{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport shortid from \"shortid\";\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [{\n    // id, content 는 게시글 자체의 속성이기 때문에 소문자, User,Images,Comments 는 다른정보들과 합쳐서 주기 때문에 대문자\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"뚜갱\"\n    },\n    content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortid.generate(),\n      src: \"http://www.chemicalnews.co.kr/news/photo/202106/3636_10174_4958.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"https://src.hidoc.co.kr/image/lib/2022/5/12/1652337370806_0.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"http://image.dongascience.com/Photo/2019/12/43a8a87814b98b5346192ec9855f5883.jpg\"\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"Amanda\"\n      },\n      content: \"우와아 고양이다\"\n    }]\n  }],\n  ImagePaths: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n  // 게시글 추가가 완료됬을 때 true\n};\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\"\n  }\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPost.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false, draft.removePostDone = true, draft.mainPost = draft.mainPost.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          //불변성\n          // const postIndex = state.mainPosts.findIndex(\n          //   (v) => v.id === action.data.postId\n          // );\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n          const post = draft.mainPosts.fine(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment);\n        }\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n      default:\n        return state;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortid","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","ImagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","mainPost","unshift","error","filter","v","post","fine","postId"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/reducers/post.js"],"sourcesContent":["import shortid from \"shortid\";\nimport produce from 'immer'\n\nexport const initialState = {\n  mainPosts: [\n    {\n      // id, content 는 게시글 자체의 속성이기 때문에 소문자, User,Images,Comments 는 다른정보들과 합쳐서 주기 때문에 대문자\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"뚜갱\",\n      },\n      content: \"첫번째 게시글 #해시태그 #익스프레스\",\n      Images: [\n        {\n          id: shortid.generate(),\n          src: \"http://www.chemicalnews.co.kr/news/photo/202106/3636_10174_4958.jpg\",\n        },\n        {\n          id: shortid.generate(),\n          src: \"https://src.hidoc.co.kr/image/lib/2022/5/12/1652337370806_0.jpg\",\n        },\n        {\n          id: shortid.generate(),\n          src: \"http://image.dongascience.com/Photo/2019/12/43a8a87814b98b5346192ec9855f5883.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          id: shortid.generate(),\n          User: {\n            id: shortid.generate(),\n            nickname: \"Amanda\",\n          },\n          content: \"우와아 고양이다\",\n        },\n      ],\n    },\n  ],\n  ImagePaths: [],\n  // 이미지 업로드할 때 이미지의 경로들이 저장됨\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  // 게시글 추가가 완료됬을 때 true\n};\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n// 상수로 액션이름을 빼주면 좋은 점: const 값을 재활용하여 오타가 나는 일을 막을 수 있음\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"뚜갱\",\n  },\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft)=> {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPost.unshift(dummyPost(action.data))\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false,\n        draft.removePostDone = true,\n        draft.mainPost = draft.mainPost.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        //불변성\n        // const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n  \n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n        const post = draft.mainPosts.fine((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment)\n      }\n      case ADD_COMMENT_FAILURE:\n        return {\n          ...state,\n          addCommentLoading: false,\n          addCommentError: action.error,\n        };\n      default:\n        return state;\n    }\n  })\n};\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}