{"ast":null,"code":"import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, ADD_POST_REQUEST, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\nfunction* loadPost(action) {\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","fork","put","takeLatest","delay","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","ADD_POST_REQUEST","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","id","generate","type","LOAD_POSTS_SUCCESS","content","err","LOAD_POSTS_FAILURE","response","addPostAPI","post","addPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","loadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/a123/Desktop/study-react/NodeBird-SNS/frontend/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_REQUEST,\n  ADD_POST_FAILURE,\n  ADD_POST_SUCCESS,\n  ADD_POST_REQUEST,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\nfunction* loadPost(action) {\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    // dispatch === put\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPosts),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}